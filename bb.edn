{:tasks
 {:requires ([babashka.fs :as fs])

  start {:doc "Run the main application"
         :task (clojure "-M -m example.caveman-demo")}

  nrepl {:doc "Start a REPL with nREPL and CIDER support"
         :task (if (fs/windows?)
                 (clojure "-M:dev -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware]\"")
                 (shell "rlwrap bb clojure -M:dev -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware]\""))}

  format_check {:doc "Check for code formatting issues in the src and dev directories"
                :task (clojure "-M:format -m cljfmt.main check src dev test")}

  format {:doc "Fix code formatting issues in the src and dev directories"
          :task (clojure "-M:format -m cljfmt.main fix src dev test")}

  lint {:doc "Run linter clj-kondo to detect code issues"
        :task (clojure "-M:lint -m clj-kondo.main --lint .")}

  test {:doc "Run tests with kaocha"
        :task (clojure "-M:dev -m kaocha.runner")}

  outdated_check {:doc "Check for outdated dependencies"
                  :task (clojure "-Sdeps '{:deps {com.github.liquidz/antq {:mvn/version \"RELEASE\"}}}' -M -m antq.core")}

  outdated {:doc "Upgrade outdated versions interactively"
            :task (clojure "-Sdeps '{:deps {com.github.liquidz/antq {:mvn/version \"RELEASE\"}}}' -M -m antq.core --upgrade")}

  uber {:doc "Build uberjar"
        :task (clojure "-T:build uber")}}}
